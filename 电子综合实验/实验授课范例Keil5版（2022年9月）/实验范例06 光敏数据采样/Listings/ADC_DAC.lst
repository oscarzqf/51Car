C51 COMPILER V9.56.0.0   ADC_DAC                                                           09/28/2022 11:18:05 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE ADC_DAC
OBJECT MODULE PLACED IN .\Objects\ADC_DAC.obj
COMPILER INVOKED BY: D:\MDK_v525\C51\BIN\C51.EXE ADC_DAC.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -ADC_DAC.lst) TABS(2) OBJECT(.\Objects\ADC_DAC.obj)

line level    source

   1          /*
   2            功能：STC89C52 + AD&DA 模块实验。
   3            1、利用软件模拟I2C总线时序驱动ADC/DAC
   4            2、利用四通道分时ADC和DAC输出
   5            程序说明：在数码管上显示通道1和通道3的采样数值，同时输出DAC结果
   6            注意事项：关于ADC（PCF8591）函数的转换通道如何理解？见程序中注释和。
   7            编制：电子科技大学实验中心2022年6月
   8          */
   9          #include<reg52.h>    //包含单片机寄存器的头文件
  10          
  11          //-----------模拟I2C总线的必备定义开始---------------
  12          //定义I2C总线时钟的延时值，要根据实际情况修改，取值1～255
  13          //SCL信号周期约为(I2C_DELAY_VALUE*4+15)个机器周期
  14          #define I2C_DELAY_VALUE   10
  15          
  16          //定义I2C总线停止后在下一次开始之前的等待时间，取值1～65535
  17          //等待时间约为(I2C_STOP_WAIT_VALUE*8)个机器周期
  18          //对于多数器件取值为1即可；但对于某些器件来说，较长的延时是必须的
  19          #define I2C_STOP_WAIT_VALUE 1
  20          
  21          //模拟I2C总线的引脚定义
  22          sbit I2C_SCL = P2^1;    //I2C  时钟
  23          sbit I2C_SDA = P2^0;    //I2C  数据
  24          sbit RST_DS = P2^4;     //加上后可以关掉DS1302时钟芯片输出
  25          
  26          //定义PCF8591 地址
  27          #define  AddWr 0x90
  28          //-----------模拟I2C总线的必备定义结束---------------
  29          
  30          //定义显示缓冲区（由定时中断程序自动扫描）
  31          unsigned char DispBuf[8];
  32          
  33          //智能小车数码管显示电路管脚定义
  34          sbit SS = P2^6;    //数码管段选信号
  35          sbit CS = P2^7;    //数码管位选信号
  36          
  37          code unsigned char Tab[] =
  38            {//定义0123456789AbCdEF的数码管字型数据，其他显示字符需自行计算，如‘-’的字形数据为0x40
  39              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,
  40              0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71
  41            };
  42            
  43          //定义延时变量，用于宏I2C_Delay()
  44          
  45          /*
  46          函数：I2C_Delay()
  47          功能：延时，模拟I2C总线专用
  48          */
  49          void I2C_Delay()
  50          {
  51   1        unsigned char I2C_Delay_t;
  52   1        I2C_Delay_t = (I2C_DELAY_VALUE);
  53   1        while ( --I2C_Delay_t != 0 );
  54   1      }
C51 COMPILER V9.56.0.0   ADC_DAC                                                           09/28/2022 11:18:05 PAGE 2   

  55          
  56          
  57          /*
  58          函数：I2C_Init()
  59          功能：I2C总线初始化，使总线处于空闲状态
  60          说明：在main()函数的开始处，通常应当要执行一次本函数
  61          */
  62          void I2C_Init()
  63          {
  64   1        I2C_SCL = 1;
  65   1        I2C_Delay();
  66   1        I2C_SDA = 1;
  67   1        I2C_Delay();
  68   1      }
  69          
  70          
  71          /*
  72          函数：I2C_Start()
  73          功能：产生I2C总线的起始状态
  74          说明：
  75            SCL处于高电平期间，当SDA出现下降沿时启动I2C总线
  76            不论SDA和SCL处于什么电平状态，本函数总能正确产生起始状态
  77            本函数也可以用来产生重复起始状态
  78            本函数执行后，I2C总线处于忙状态
  79          */
  80          void I2C_Start()
  81          {
  82   1        I2C_SDA = 1;
  83   1        I2C_Delay();
  84   1        I2C_SCL = 1;
  85   1        I2C_Delay();
  86   1        I2C_SDA = 0;
  87   1        I2C_Delay();
  88   1        I2C_SCL = 0;
  89   1        I2C_Delay();
  90   1      }
  91          
  92          /***********************************************************
  93          函数：I2C_Stop()
  94          功能：产生I2C总线的停止状态
  95          说明：
  96            SCL处于高电平期间，当SDA出现上升沿时停止I2C总线
  97            不论SDA和SCL处于什么电平状态，本函数总能正确产生停止状态
  98            本函数执行后，I2C总线处于空闲状态
  99          ***********************************************************/
 100          void I2C_Stop()
 101          {
 102   1        unsigned int t = I2C_STOP_WAIT_VALUE;
 103   1        I2C_SDA = 0;
 104   1        I2C_Delay();
 105   1        I2C_SCL = 1;
 106   1        I2C_Delay();
 107   1        I2C_SDA = 1;
 108   1        I2C_Delay();
 109   1        while ( --t != 0 );   //在下一次产生Start之前，要加一定的延时
 110   1      }
 111          
 112          /*
 113          函数：I2C_Write()
 114          功能：向I2C总线写1个字节的数据
 115          参数：
 116            dat：要写到总线上的数据
C51 COMPILER V9.56.0.0   ADC_DAC                                                           09/28/2022 11:18:05 PAGE 3   

 117          */
 118          void I2C_Write(unsigned char dat)
 119          {
 120   1        unsigned char t = 8;
 121   1        do
 122   1        {
 123   2          I2C_SDA = (bit)(dat & 0x80);
 124   2          dat <<= 1;
 125   2          I2C_SCL = 1;
 126   2          I2C_Delay();
 127   2          I2C_SCL = 0;
 128   2          I2C_Delay();
 129   2        } while ( --t != 0 );
 130   1      }
 131          
 132          
 133          /*
 134          函数：I2C_Read()
 135          功能：从从机读取1个字节的数据
 136          返回：读取的一个字节数据
 137          */
 138          unsigned char I2C_Read()
 139          {
 140   1        unsigned char dat;
 141   1        unsigned char t = 8;
 142   1        I2C_SDA = 1;  //在读取数据之前，要把SDA拉高
 143   1        do
 144   1        {
 145   2          I2C_SCL = 1;
 146   2          I2C_Delay();
 147   2          dat <<= 1;
 148   2          if ( I2C_SDA ) dat |= 0x01;
 149   2          I2C_SCL = 0;
 150   2          I2C_Delay();
 151   2        } while ( --t != 0 );
 152   1        return dat;
 153   1      }
 154          
 155          
 156          /*
 157          函数：I2C_GetAck()
 158          功能：读取从机应答位
 159          返回：
 160            0：从机应答
 161            1：从机非应答
 162          说明：
 163            从机在收到每个字节的数据后，要产生应答位
 164            从机在收到最后1个字节的数据后，一般要产生非应答位
 165          */
 166          bit I2C_GetAck()
 167          {
 168   1        bit ack;
 169   1        I2C_SDA = 1;
 170   1        I2C_Delay();
 171   1        I2C_SCL = 1;
 172   1        I2C_Delay();
 173   1        ack = I2C_SDA;
 174   1        I2C_SCL = 0;
 175   1        I2C_Delay();
 176   1        return ack;
 177   1      }
 178          
C51 COMPILER V9.56.0.0   ADC_DAC                                                           09/28/2022 11:18:05 PAGE 4   

 179          
 180          /*
 181          函数：I2C_PutAck()
 182          功能：主机产生应答位或非应答位
 183          参数：
 184            ack=0：主机产生应答位
 185            ack=1：主机产生非应答位
 186          说明：
 187            主机在接收完每一个字节的数据后，都应当产生应答位
 188            主机在接收完最后一个字节的数据后，应当产生非应答位
 189          */
 190          void I2C_PutAck(bit ack)
 191          {
 192   1        I2C_SDA = ack;
 193   1        I2C_Delay();
 194   1        I2C_SCL = 1;
 195   1        I2C_Delay();
 196   1        I2C_SCL = 0;
 197   1        I2C_Delay();
 198   1      }
 199          
 200          /************************************************************
 201          * 函数名        : Pcf8591_DaConversion
 202          * 函数功能      : PCF8591的输出端输出模拟量
 203          * 输入        : addr（器件地址），channel（转换通道），value（转换的数值）
 204          * 输出        : 无
 205          ******************* *****************************************/
 206          bit Pcf8591_DaConversion(unsigned char addr,unsigned char channel,  unsigned char Val)
 207          {
 208   1        I2C_Start();              //启动总线
 209   1        I2C_Write(addr);            //发送器件地址
 210   1        if ( I2C_GetAck() )
 211   1        {
 212   2          I2C_Stop();
 213   2          return 1;
 214   2        }
 215   1         I2C_Write(0x40|channel);              //发送控制字节
 216   1        if ( I2C_GetAck() )
 217   1        {
 218   2          I2C_Stop();
 219   2          return 1;
 220   2        }
 221   1        I2C_Write(Val);            //发送DAC的数值  
 222   1        if ( I2C_GetAck() )
 223   1        {
 224   2          I2C_Stop();
 225   2          return 1;
 226   2        }
 227   1        I2C_Stop();               //结束总线
 228   1        return 0;
 229   1      }
 230          
 231          /************************************************************
 232          * 函数名      : Pcf8591_SendByte
 233          * 函数功能    : 写入一个控制命令
 234          * 输入      : addr（器件地址），channel（转换通道）
 235          * 输出      : 无
 236          ************************************************************/
 237          bit PCF8591_SendByte(unsigned char addr,unsigned char channel)
 238          {
 239   1        I2C_Start();              //启动总线
 240   1        I2C_Write(addr);            //发送器件地址
C51 COMPILER V9.56.0.0   ADC_DAC                                                           09/28/2022 11:18:05 PAGE 5   

 241   1        if ( I2C_GetAck() )
 242   1        {
 243   2          I2C_Stop();
 244   2          return 1;
 245   2        }
 246   1        I2C_Write(0x40|channel);              //发送控制字节
 247   1        if ( I2C_GetAck() )
 248   1        {
 249   2          I2C_Stop();
 250   2          return 1;
 251   2        }
 252   1        I2C_Stop();               //结束总线
 253   1        return 0;
 254   1      }
 255          
 256          /************************************************************
 257          * 函数名        : PCF8591_RcvByte
 258          * 函数功能    : 读取一个转换值
 259          * 输入          :
 260          * 输出          : dat
 261          ************************************************************/
 262          unsigned char PCF8591_RcvByte(unsigned char addr)
 263          {  
 264   1        unsigned char dat;
 265   1      
 266   1        I2C_Start();          //启动总线
 267   1        I2C_Write(addr+1);      //发送器件地址
 268   1        if ( I2C_GetAck() )
 269   1        {
 270   2          I2C_Stop();
 271   2          return 1;
 272   2        }
 273   1        dat=I2C_Read();         //读取数据0
 274   1      
 275   1        I2C_PutAck(1);           //发送非应答信号
 276   1        I2C_Stop();           //结束总线
 277   1        return(dat);
 278   1      }
 279          
 280          /*
 281          函数：T1INTSVC()
 282          功能：定时器T1的中断服务函数
 283          */
 284          void T1INTSVC() interrupt 3 //定时器1的中断号为：3
 285          {
 286   1        code unsigned char com[] = {0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01}; //显示位的端口控制字节
 287   1        static unsigned char n = 0;           //n: 扫描显示位计数,0-7
 288   1      
 289   1      //================数码管定时扫描驱动显示=============== 
 290   1        TR1 = 0;
 291   1        TH1 = 0xFC;
 292   1        TL1 = 0x66;           //可以将FC66换成0000，降低扫描速度，观察和理解动态扫描
 293   1        TR1 = 1;
 294   1        P0 = 0xFF;    //消隐
 295   1        CS = 1;
 296   1        CS = 0;
 297   1        P0 = DispBuf[n];  //更新扫描显示数据
 298   1        SS = 1;
 299   1        SS = 0;
 300   1        P0 = ~com[n]; //重新显示
 301   1        CS = 1;
 302   1        CS = 0;
C51 COMPILER V9.56.0.0   ADC_DAC                                                           09/28/2022 11:18:05 PAGE 6   

 303   1        n++;            //指向下一位扫描显示
 304   1        n &= 0x07;
 305   1      //====================================================
 306   1      }
 307          /*
 308          函数：DispClear()
 309          功能：清除数码管的所有显示
 310          */
 311          void DispClear()
 312          {
 313   1        unsigned char i;
 314   1        for ( i=0; i<8; i++ )
 315   1        {
 316   2          DispBuf[i] = 0x00;  //i值代表数码管的位数，可以在后面的程序观察是左起还是右起，0x00可以关闭数码管显示
 317   2        }
 318   1      }
 319          /*
 320          函数：SysInit()
 321          功能：系统初始化
 322          */
 323          void SysInit()
 324          {
 325   1      
 326   1        DispClear();  //初始为全灭
 327   1      
 328   1        TMOD = 0x11;  //设置定时器T0为16位定时器，定时器T1为16位定时器
 329   1        EA = 0;
 330   1        TH1 = 0xFC;   //设置定时器1的初值: 0xFC66，对应定时时间1ms
 331   1        TL1 = 0x66;
 332   1        ET1 = 1;    //使能定时器T1中断
 333   1        EA = 1;     //使能总中断
 334   1        TR1 = 1;    //启动定时器T1
 335   1      }
 336          void Display(unsigned char dat1,unsigned char dat2)
 337          
 338          {
 339   1      
 340   1        DispBuf[7] = Tab[dat1 / 100];       //在8位数码管上显示“12345678”字样
 341   1        DispBuf[6] = Tab[dat1 /10 % 10];
 342   1        DispBuf[5] = Tab[dat1 % 10];
 343   1      
 344   1        DispBuf[2] = Tab[dat2 / 100];
 345   1        DispBuf[1] = Tab[dat2 /10 % 10];
 346   1        DispBuf[0] = Tab[dat2 % 10];
 347   1      }
 348          /*
 349          函数：Delayms()
 350          功能：延时
 351          说明：
 352            晶振频率为11.0592MHz
 353            延时长度 = 1ms * t
 354          */
 355          void Delayms(unsigned int t)
 356          {
 357   1        unsigned int us_ct;
 358   1        for (;t > 0;t --)   //执行代码消耗CPU时间
 359   1          for (us_ct = 113;us_ct > 0;us_ct --); 
 360   1      }
 361          /*------------------------------------------------
 362                              主函数
 363          ------------------------------------------------*/
 364          void main()
C51 COMPILER V9.56.0.0   ADC_DAC                                                           09/28/2022 11:18:05 PAGE 7   

 365          {  
 366   1        unsigned char light,voltage;//定义中间变量
 367   1        unsigned char chl2,chl4;//定义中间变量
 368   1        unsigned char AD_CHANNEL = 0;
 369   1        RST_DS = 0;                     //    关时钟DS1302
 370   1        SysInit();
 371   1        I2C_Init();
 372   1        //开机显示12345678，用于数码管显示检测
 373   1        DispBuf[7] = Tab[1];      //在8位数码管上显示“12345678”字样
 374   1        DispBuf[6] = Tab[2];
 375   1        DispBuf[5] = Tab[3];
 376   1        DispBuf[4] = Tab[4];
 377   1        DispBuf[3] = Tab[5];
 378   1        DispBuf[2] = Tab[6];
 379   1        DispBuf[1] = Tab[7];
 380   1        DispBuf[0] = Tab[8];
 381   1        Delayms(2000);          //保留2s
 382   1        DispClear();        //清除显示（数码管上的显示内容全部熄灭  
 383   1        while(1)
 384   1        {
 385   2      
 386   2        /********以下AD-DA处理*************/  
 387   2        /*关于ADC（PCF8591）函数的理解问题：
 388   2          A/D转换周期总是在发送一个有效的读模式地址到PCF8591设备后开始。
 389   2          A/D转换周期在应答时钟脉冲的后缘触发，所以每次ADC读取的数据总是上一次转换的结果。
 390   2          多通道转换读取时，函数PCF8591_SendByte(AddWr,N)中的N指向需要下一次转换的通道。
 391   2          而紧接着的PCF8591_RcvByte(AddWr);读取的不是它上一句指示的通道，而是前一次的。
 392   2          假如不是多个通道分时转换，只考虑一个通道，那么N就只是需要转换的通道号了。
 393   2        */
 394   2          switch(AD_CHANNEL)
 395   2          {
 396   3            case 0: 
 397   3              PCF8591_SendByte(AddWr,1);
 398   3              light = PCF8591_RcvByte(AddWr);  //ADC0 模数转换1  J8上可接任意电阻元件
 399   3            break;  
 400   3            
 401   3            case 1: 
 402   3              PCF8591_SendByte(AddWr,2);
 403   3              chl2 =PCF8591_RcvByte(AddWr);  //ADC1  模数转换2
 404   3            break;  
 405   3            
 406   3            case 2: 
 407   3              PCF8591_SendByte(AddWr,3);
 408   3              voltage =PCF8591_RcvByte(AddWr);  //ADC2  模数转换3   可调电阻SW1
 409   3            break;  
 410   3            
 411   3            case 3: 
 412   3              PCF8591_SendByte(AddWr,0);
 413   3              chl4 =PCF8591_RcvByte(AddWr);  //ADC3   模数转换4  可调电阻SW2
 414   3            break;
 415   3            
 416   3            case 4: 
 417   3              Pcf8591_DaConversion(AddWr,0, voltage); //DAC   数模转换
 418   3            break;      
 419   3          }   
 420   2          
 421   2          if(++AD_CHANNEL > 4) AD_CHANNEL = 0;
 422   2          Display(light,voltage);
 423   2          Delayms(50);
 424   2         }
 425   1      }

C51 COMPILER V9.56.0.0   ADC_DAC                                                           09/28/2022 11:18:05 PAGE 8   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    639    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
